AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:
  LambdaRoleArn:
    Type: String
    Default: ""
  StepFunctionRoleArn:
    Type: String
    Default: ""
  NotifyStreamArn:
    Type: String
    Default: ""
  PolicyLambdaArn:
    Type: String
  InspectionDelay:
    Type: Number
    Default: 300
  ReviewDelay:
    Type: Number
    Default: 600

Conditions:
  LambdaRoleRequired:
    Fn::Equals: [ { Ref: LambdaRoleArn }, "" ]
  StepFunctionRoleRequired:
    Fn::Equals: [ { Ref: StepFunctionRoleArn }, "" ]
  NotifyStreamAvailable:
    Fn::Not: [!Equals [!Ref NotifyStreamArn, ""]]

Globals:
  Function:
    Runtime: go1.x
    CodeUri: build
    Timeout: 30
    MemorySize: 128


Resources:
  AlertMap:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: alert_key
        AttributeType: S
      KeySchema:
      - AttributeName: alert_key
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ReportData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: report_id
        AttributeType: S
      - AttributeName: data_id
        AttributeType: S
      KeySchema:
      - AttributeName: report_id
        KeyType: HASH
      - AttributeName: data_id
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    
  TaskStream:
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1
    Type: AWS::Kinesis::Stream

  DelayDispatcher:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: ["${StackName}-delay-dispatcher", {"StackName": {"Ref": "AWS::StackName"} }]
      RoleArn:
        Fn::If: [ StepFunctionRoleRequired, {"Fn::GetAtt": StepFunctionRole.Arn}, {Ref: StepFunctionRoleArn} ]
      DefinitionString:
        !Sub
          - |-
            {"StartAt":"Waiting","States":{"Waiting":{"Type":"Wait","Next":"Exec","Seconds":${delay}},"Exec":{"Type":"Task","Resource":"${lambdaArn}","End":true}}}
          - {lambdaArn: !GetAtt [ Dispatcher, Arn ], delay: {Ref: InspectionDelay }}

  PolicyInvoker:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: ["${StackName}-policy-invoker", {"StackName": {"Ref": "AWS::StackName"} }]
      RoleArn:
        Fn::If: [ StepFunctionRoleRequired, {"Fn::GetAtt": StepFunctionRole.Arn}, {Ref: StepFunctionRoleArn} ]
      DefinitionString:
        !Sub
          - |-
            {"StartAt":"Wating","States":{"Wating":{"Type":"Wait","Next":"Exec","Seconds":${delay}},"Exec":{"Type":"Task","Resource":"${policyLambdaArn}","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.Error","Next":"ErrorHandler"}],"ResultPath":"$.Result","Next":"Review"},"ErrorHandler":{"Type":"Task","Resource":"${errorHandlerArn}","End":true},"Review":{"Type":"Task","Resource":"${reviewerArn}","End":true}}}
          - policyLambdaArn:
              Ref: PolicyLambdaArn
            reviewerArn: 
              Fn::GetAtt: Reviewer.Arn
            errorHandlerArn:
              Fn::GetAtt: ErrorHandler.Arn
            delay:
              Ref: ReviewDelay

  Receptor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receptor
      Role:
        Fn::If: [ LambdaRoleRequired, {"Fn::GetAtt": LambdaRole.Arn}, {Ref: LambdaRoleArn} ]
      Environment:
        Variables:
          ALERT_MAP:
            Fn::Sub: ${AlertMap}
          DISPATCH_MACHINE:
            Ref: DelayDispatcher
          REVIEW_MACHINE:
            Ref: PolicyInvoker
          REPORT_LINE:
            Ref: ReportLine


  Dispatcher:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dispatcher
      Environment:
        Variables:
          STREAM_NAME:
            Fn::Sub: ${TaskStream}
      Role:
        Fn::If: [ LambdaRoleRequired, {"Fn::GetAtt": LambdaRole.Arn}, {Ref: LambdaRoleArn} ]
        
  Reviewer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: reviewer
      Environment:
        Variables:
          REPORT_LINE:
            Ref: ReportLine
          INCIDENT_LINE:
            Ref: IncidentLine
      Role:
        Fn::If: [ LambdaRoleRequired, {"Fn::GetAtt": LambdaRole.Arn}, {Ref: LambdaRoleArn} ]

  ErrorHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: reviewer
      Role:
        Fn::If: [ LambdaRoleRequired, {"Fn::GetAtt": LambdaRole.Arn}, {Ref: LambdaRoleArn} ]
          
  ReportLine:
    Type: AWS::SNS::Topic

  IncidentLine:
    Type: AWS::SNS::Topic

  LambdaRole:
    Type: AWS::IAM::Role
    Condition: LambdaRoleRequired
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AlertResponderLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - Fn::GetAtt: AlertMap.Arn
                  - Fn::Sub: [ "${TableArn}/index/*", { TableArn: { "Fn::GetAtt": AlertMap.Arn } } ]
                  - Fn::GetAtt: ReportData.Arn
                  - Fn::Sub: [ "${TableArn}/index/*", { TableArn: { "Fn::GetAtt": ReportData.Arn } } ]
              - Effect: "Allow"
                Action:
                  - sns:Publish
                Resource:
                  - Ref: ReportLine
                  - Ref: IncidentLine
              - Effect: "Allow"
                Action:
                  - states:StartExecution
                Resource:
                  - Fn::Sub:
                    - "arn:aws:states:${Region}:${Account}:stateMachine:${StackName}-delay-dispatcher"
                    - StackName: {"Ref": "AWS::StackName"}
                      Region: {"Ref": "AWS::Region"}
                      Account: {"Ref": "AWS::AccountId" }
                  - Fn::Sub:
                    - "arn:aws:states:${Region}:${Account}:stateMachine:${StackName}-delay-dispatcher"
                    - StackName: {"Ref": "AWS::StackName"}
                      Region: {"Ref": "AWS::Region"}
                      Account: {"Ref": "AWS::AccountId" }

  StepFunctionRole:
    Type: AWS::IAM::Role
    Condition: StepFunctionRoleRequired
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: {"Fn::Sub": ["states.${Region}.amazonaws.com", {"Region": {"Ref": "AWS::Region" }}]}
            Action: ["sts:AssumeRole"]
      Path: "/"
      Policies:
        - PolicyName: "AlertResponderLambdaInvokePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Ref: PolicyLambdaArn
                  - Fn::GetAtt: ErrorHandler.Arn
                  - Fn::GetAtt: Reviewer.Arn